<video width="640" height="360" controls>
  <source src="{{ asset('/image/'.$item->foto)}}" type="video/mp4">
  Your browser does not support the video tag.
</video>

$request->validate([
                'foto' => 'required|file|mimes:mp4,gif|max:10240',
            ]);

https://medium.com/@revalinaf180/data-relational-dan-fitur-upload-foto-di-laravel-9-crud-e384c908e6d7
https://www.sinauo.com/2021/08/tutorial-crud-laravel-8-simple-dan.html
https://dev.to/yudhasdev/tutorial-laravel-1-membuat-project-baru-161g
https://www.sobatambisius.com/2021/11/cara-mengupload-website-ke-github.html
https://bahasaweb.com/membuat-hak-akses-user-di-laravel/
https://maseduproject.com/tutorial-laravel-10-part-13-relasi-antar-tabel-one-to-many/
https://www.sahretech.com/2020/11/cara-menampilkan-data-di-laravel-dengan.html
https://www.itsolutionstuff.com/post/laravel-10-multi-auth-create-multiple-authentication-in-laravelexample.html

composer global require laravel/installer
laravel new nama_projek

composer create-project laravel/laravel nama_projek
php artisan migrate
composer require laravel/ui
php artisan ui:auth
php artisan ui bootstrap
npm install
npm run dev
npm run build
php artisan serve

middleware\RedirectIfAuththenticated
	// Jika pengguna sudah login, redirect dari rute login
        if (Auth::check() && $request->routeIs('login')) {
            return redirect('/home'); // Sesuaikan dengan path halaman setelah login
        }

        // Jika pengguna belum login, redirect dari rute logout
        if (!Auth::check() && $request->routeIs('logout')) {
            return redirect('/login'); // Sesuaikan dengan path halaman login
        }

        return $next($request);


controller
<?php

namespace App\Http\Controllers;

use App\Models\Feed;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Storage;

class FeedController extends Controller
{
    /**
     * Display a listing of the resource.
     */
    public function index()
    {
        $feed = Feed::latest()->paginate(5);
        return view('feed.index', compact('feed'));
    }

    /**
     * Show the form for creating a new resource.
     */
    public function create()
    {
        return view('feed.create');
    }

    /**
     * Store a newly created resource in storage.
     */
    public function store(Request $request)
    {
        $request->validate([
            'video' => ['required', 'mimes:mp4', 'max:10240']
        ]);

        $user = auth()->user();
        $feed = new Feed();
        $feed->created_by = $user->id;
        $feed->video =$request->file('video')->store('feed');
        $feed->caption = $request->caption;
        $feed->save();

        return redirect(route('feed.index'))->with('success','Added!');
    }

    /**
     * Remove the specified resource from storage.
     */
    public function destroy(Feed $feed)
    {
        if($feed->video) {
            Storage::delete($feed->video);
        }
        if ($feed->delete()) {
            return redirect()->route('feed.index')->with('success', 'Video berhasil di hapus!');
        }
        return redirect()->route('feed.index')->with('error', 'Video gagal di hapus!');
    }
}
